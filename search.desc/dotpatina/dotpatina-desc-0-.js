searchState.loadedDescShard("dotpatina", 0, "The Patina CLI is a simple command line application …\nMain entry point for the application. This launches the …\nRender and apply a patina\nThe available commands for the CLI\nOptions that apply globally to the CLI\nThe patina CLI renders files from templates and sets of …\nOptions that apply to patina subcommands\nRender a patina to stdout\nThe specified command to run\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGlobal options apply to all subcommands\nIncluded global options\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDisable colors\nParse and return command line arguments\nThe file path to the patina toml file\nRun the CLI\nThe list of tags to filter on\nThe verbosity level of the CLI\nDon’t ask for user input\nCommand line options\nCommand line options\nDiffAnalysis provides functionality for diffs within …\nDetails for a line output for a diff\nDetermine if there are any changes in the diff\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet a String representation of the diff for display\nThe PatinaEngine is the main driver of logic for dotpatina …\nApplies all of the Patina files\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new PatinaEngine\nThe path to the patina file on disk\nA reference to the PatinaInterface that defines how to …\nRenders a Patina\nThe set of tags to filter on\nPatinaOutput specifies operations for interfacing with …\nPrompts the user for confirmation to apply the patina\nGet whether or not input is enabled\nOutput a single string\nOutput a diff view\nOutput a patina render\nSet whether or not input is enabled\nA Patina describes a set of variables and templates that …\nThe path to this patina\nA short description of the Patina\nA list of files referencing templates and their target …\nGet an iterator for all PatinaFiles that are tagged with …\nReturns the argument unchanged.\nLoad a Patina from a TOML file\nGet a path within the context of this Patina\nCalls <code>U::from(self)</code>.\nThe name of the Patina\nA map of variables that can be used in the templates\nA PatinaFile describes a template file and its target …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn optional list of tags for this patina file. This allows …\nThe path to the garget output file\nThe path to the template file\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRenders all of the files in a Patina, each to a string in …\nContains the error value\nAn enum representing all possible errors that can occur in …\nAn error that occurs when a file cannot be read\nAn error that occurs when a file cannot be written\nFailed to get input from the user\nA general error with a message\nContains the success value\nAn error that occurs when rendering a handlebars template\nA Result type that uses the <code>Error</code> enum\nAn error that occurs when parsing Toml data\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nOptionally returns references to the inner fields if this …\nOptionally returns mutable references to the inner fields …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the inner fields if this is a <code>Error::FileRead</code>, …\nReturns the inner fields if this is a <code>Error::FileWrite</code>, …\nReturns the inner fields if this is a <code>Error::GetUserInput</code>, …\nReturns the inner fields if this is a <code>Error::Message</code>, …\nReturns the inner fields if this is a <code>Error::RenderTemplate</code>…\nReturns the inner fields if this is a <code>Error::TomlParse</code>, …\nReturns true if this is a <code>Error::FileRead</code>, otherwise false\nReturns true if this is a <code>Error::FileWrite</code>, otherwise false\nReturns true if this is a <code>Error::GetUserInput</code>, otherwise …\nReturns true if this is a <code>Error::Message</code>, otherwise false\nReturns true if this is a <code>Error::RenderTemplate</code>, otherwise …\nReturns true if this is a <code>Error::TomlParse</code>, otherwise false\nGiven a path, normalize it to an absolute path with cwd (<code>.</code>…")